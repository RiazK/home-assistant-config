binary_sensor:
  - platform: template
    sensors:
      alarm_trouble:
        entity_id: sensor.home_alarm_keypad
        value_template: "{{ state_attr('sensor.home_alarm_keypad', 'trouble') }}"
  - platform: template
    sensors:
      alarm_battery_trouble:
        entity_id: sensor.home_alarm_keypad
        value_template: "{{ state_attr('sensor.home_alarm_keypad', 'bat_trouble') }}"
  - platform: template
    sensors:
      alarm_ac_power:
        entity_id: sensor.home_alarm_keypad
        value_template: "{{ state_attr('sensor.home_alarm_keypad', 'ac_present') }}"

automation:
  ### Notify alarm state change
  - id: '1586327112617'
    alias: Notify Alarm Armed Home
    description: Notify when Alarm panel is armed or disarmed
    trigger:
    - entity_id: alarm_control_panel.home_alarm
      platform: state
    condition:
      - condition: template
        value_template: "{{ not is_state('alarm_control_panel.home_alarm', 'triggered') }}"
    action:
    - service: notify.slack
      data:
        data:
          icon: ":rotating_light:"
          username: "Home Alarm"
        target: ["#alerts"]
        message: >
          :rotating_light: Home alarm {{ states.sensor.home_alarm_keypad.state }}


  ### Notify sensor that triggered alarm --- WIP
  - id: '1586327112618'
    alias: Notify Alarm Armed Triggered
    description: Notify when Alarm panel is triggered
    trigger:
    - entity_id: alarm_control_panel.home_alarm
      platform: state
      to: 'triggered'
    condition: []
    action:
    - service: notify.slack
      data_template:
        data:
          icon: ":rotating_light:"
          username: "Home Alarm"
        title: '*ALARM TRIGGERED!*'
        target: ["#alerts"]
        message: >
          :rotating_light: *ALARM TRIGGERED!* on: 
          {%- set domains = ['binary_sensor'] -%}
          {%- for domain in domains -%}
          {%- for item in states[domain]  if ((item.attributes.device_class is defined and item.state|string|lower == "on") and ((item.attributes['device_class']|lower) == "opening" or item.attributes['device_class']|lower == "motion")) -%}
            {{ " " }}{{ item.attributes.friendly_name }}{%- if not loop.last %},{% endif -%}
          {%- endfor -%}
          {%- endfor -%}

  ### Notify keypad error
  - alias: Notify when Alarm panel keypad has zone/sensor fault
    description: Notify when Alarm panel keypad has zone/sensor fault
    trigger:
    - entity_id: sensor.home_alarm_keypad
      platform: state
      to: 'zone/sensor fault'
    - entity_id: binary_sensor.alarm_trouble
      platform: state
      to: 'on'
    - entity_id: binary_sensor.alarm_trouble
      platform: state
      to: 'off'
    condition: []
    action:
    - service: notify.slack
      data_template:
        data:
          icon: ":rotating_light:"
          username: "Home Alarm"
        title: 'Zone/Sensor Fault'
        target: ["#alerts"]
        message: >
          :rotating_light: *ALARM Fault* {% if(states.binary_sensor.alarm_trouble.state == "off") %}Resolved{% endif %}{{- '\n' -}}
          Current keypad state: {{ states.sensor.home_alarm_keypad.state }}
          

  ### Notify battery error
  - alias: Notify when Alarm panel keypad has zone/sensor fault
    description: Notify when Alarm panel keypad has zone/sensor fault
    trigger:
    - entity_id: binary_sensor.alarm_battery_trouble
      platform: state
      to: 'on'
    - entity_id: binary_sensor.alarm_battery_trouble
      platform: state
      to: 'off'
    condition: []
    action:
    - service: notify.slack
      data_template:
        data:
          icon: ":rotating_light:"
          username: "Home Alarm"
        title: 'Zone/Sensor Fault'
        target: ["#alerts"]
        message: >
          :rotating_light: *ALARM Battery Fault!* {% if (states.binary_sensor.alarm_battery_trouble.state == "off") %}Resolved{% endif %}          

  ### Notify front beam stuck error
  - alias: Notify when front beam stuck on
    description: Notify when front beam stuck on
    trigger:
    - platform: state
      entity_id: binary_sensor.front_beam
      to: 'on' #'unavailable'
      for:
        hours: 0
        minutes: 15
        seconds: 0
    condition: []
    action:
    - service: notify.slack
      data_template:
        data:
          icon: ":rotating_light:"
          username: "Home Alarm"
        title: 'Zone/Sensor Fault'
        target: ["#alerts"]
        message: >
          :rotating_light: *ALARM Fault on Front Beam!* {% if (states.binary_sensor.front_beam.state == "off") %}Resolved{% endif %}
  - alias: Notify Repeat when front beam stuck on 
    description: Notify Repeat when front beam stuck on
    trigger:
    - platform: time_pattern
      hours: '1'
    condition:
    - condition: state
      entity_id: binary_sensor.front_beam
      state: 'on'
      for:
        minutes: 30
    action:
    - service: notify.slack
      data_template:
        data:
          icon: ":rotating_light:"
          username: "Home Alarm"
        title: 'Zone/Sensor Fault'
        target: ["#alerts"]
        message: >
          :rotating_light: *ALARM Fault on Front Beam!* {% if (states.binary_sensor.front_beam.state == "off") %}Resolved{% endif %}