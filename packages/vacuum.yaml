# If your robot is not auto detected you might need this for manual setup
#vacuum:
#  - platform: mqtt

timer:
  # When calling the start service on a timer that is already running, it resets 
  # the duration it will need to finish and restart the timer without triggering 
  # a canceled or finished event. This, for example, makes it easy to create 
  # timed lights that get triggered by motion. Starting a timer triggers a 
  # started event unless the timer is paused, in that case, it triggers a 
  # restarted event.
  vacuumautoresume:
    duration: '00:15:00'

sensor:
  - platform: template
    sensors: 
      vacuum_error_code:
        value_template: "{{ states.vacuum.rockrobo.attributes.last_run_stats.errorCode|int }}"
        friendly_name: 'Vacuum Error Code' 
  - platform: template
    sensors: 
      vacuum_error_message:
        value_template: "{{ states.vacuum.rockrobo.attributes.last_run_stats.errorMessage|string }}"
        friendly_name: 'Vacuum Error Message' 

automation:
  ### Notify state change
  - alias: Notify when Robot State Change
    description: Notify when Robot State Change
    trigger:
    - entity_id: vacuum.rockrobo
      platform: state
      to: 'cleaning'
    - entity_id: vacuum.rockrobo
      platform: state
      to: 'paused'
    #- entity_id: vacuum.rockrobo
    #  platform: state
    #  to: 'docked'
    #- entity_id: vacuum.rockrobo
    #  platform: state
    #  to: 'idle'
    #- entity_id: vacuum.rockrobo
    #  platform: state
    #  to: 'returning'
    condition: []
    action:
    - service: notify.slack
      data_template:
        data:
          icon: ":robot_face:"
          username: "Vacuum Robot"
        title: 'Vacuum Robot'
        target: ["#general"]
        message: >
          Vacuum Robot is now {{ states.vacuum.rockrobo.state }}
          
  ### Auto-resume after pause
  - alias: Vacuum Auto-resume after pause timer
    description: Vacuum Auto-resume after pause timer
    trigger:
    - entity_id: vacuum.rockrobo
      platform: state
      from: 'cleaning'
      to: 'paused'
    condition: []
    action:
    - service: timer.start
      data:
        entity_id: timer.vacuumautoresume
  - alias: Vacuum Auto-resume after pause timer end
    trigger:
      platform: event
      event_type: timer.finished
      event_data:
        entity_id: timer.vacuumautoresume
    action:
      - service: vacuum.start
        data:
          entity_id: vacuum.rockrobo

  ### Notify error
  - alias: Notify when Robot has error
    description: Notify when Robot has error
    trigger:
    - entity_id: sensor.vacuum_error_code
      platform: state
      from: '0'
    condition: []
    action:
    - service: notify.slack
      data_template:
        data:
          icon: ":robot_face:"
          username: "Vacuum Robot"
        title: 'Vacuum Robot Error'
        target: ["#general"]
        message: >
          Vacuum Robot Error: {{ states.sensor.vacuum_error_code.state }} {{ states.sensor.vacuum_error_message.state }} 

  ### Notify when failed to docked after returning
  - alias: Notify when Robot failed to dock
    description: Notify when Robot failed to dock
    trigger:
    - entity_id: vacuum.rockrobo
      platform: state
      from: 'returning'
      to: 'idle'
    condition: []
    action:
    - service: notify.slack
      data_template:
        data:
          icon: ":robot_face:"
          username: "Vacuum Robot"
        title: 'Vacuum Robot'
        target: ["#general"]
        message: >
          Vacuum Robot failed to dock!

  ### Notify last clean results
  - alias: Notify when Robot State Change
    description: Notify when Robot State Change
    trigger:
    - entity_id: vacuum.rockrobo
      platform: state
      from: 'cleaning'
      to: 'returning'
    condition: []
    action:
    - service: script.notify_robot_cleaning_stats

script:
  ### Notify last clean results
  notify_robot_cleaning_stats:
    sequence:
      - service: camera.snapshot
        data_template:
          entity_id: camera.rockrobo_map
          filename: "/config/www/cam_captures/rockrobo_map_{{ now ().year }}_{{ now ().month }}_{{ now ().day }}_{{ now ().hour }}_{{ now ().minute }}.jpg"
      - delay: 
          seconds: 5
      - service: notify.slack
        data_template:
          data:
            icon: ":robot_face:"
            username: "Vacuum Robot"
          target: ["#general"]
          message: >
            Vacuum Robot latest cleaning stats:{{- '\n' -}}
            Duration: {{ (states.vacuum.rockrobo.attributes.last_run_stats.duration|int)/60|round(1) }} minutes{{- '\n' -}}
            Area: {{ states.vacuum.rockrobo.attributes.last_run_stats.area }} m2{{- '\n' -}}
#          Start time: {{ states.vacuum.rockrobo.attributes.last_run_stats.startTime|int|timestamp_custom("%d.%m.%Y %H:%M") }}{{- '\n' -}}
#          End time: {{ states.vacuum.rockrobo.attributes.last_run_stats.endTime|int|timestamp_custom("%d.%m.%Y %H:%M") }}{{- '\n' -}}
          data:
            file: 
              path: "/config/www/cam_captures/rockrobo_map_{{ now ().year }}_{{ now ().month }}_{{ now ().day }}_{{ now ().hour }}_{{ now ().minute }}.jpg"
              ### path is now required as of 0.113.0 see https://github.com/home-assistant/home-assistant.io/pull/13860/files

