###### Sending commands example at https://github.com/arendst/Tasmota/issues/8226
# You should put cmnd in front, like this: cmnd/zigbeeGateway/ZbSend (ZigbeeSend instead of ZbSend for older versions of Tasmota)
# 
# In MQTT-settings in your Tasmota webinterface you define"Topic = %topic%" as in my example: zigbeeGateway
# And "Full Topic (%prefix%/%topic%/)" should be: %prefix%/%topic%/
# 
# And then you just send { "device":"0x4773", "send":{"Power":"On"} } as payload via MQTT, and then the light should turn on e.g.



automation:
  ## Zigbee2tasmota MQTT demultiplexer automations
  # Motion sensors
  - alias: 'MQTT Zigbee Occupancy'
    mode: parallel
    initial_state: true
    trigger:
      - platform: mqtt
        topic: 'tele/tasmota_zbbridge/SENSOR'
    condition:
      - condition: template
        value_template: >
          {{ 'Occupancy' in ((trigger.payload_json.ZbReceived.values() | list)[0].keys() | list) }}
    action:
      - service: mqtt.publish
        data_template:
          topic: homeassistant/binary_sensor/{{ (trigger.payload_json.ZbReceived.keys() | list)[0] }}Occupancy/config
          retain: true
          payload: >
            {% set code = (trigger.payload_json.ZbReceived.keys() | list)[0] %}
            {
              "name": "{{ trigger.payload_json.ZbReceived[code].Name }} Motion",
              "device_class": "motion",
              "state_topic": "tele/zigbee/{{ (trigger.payload_json.ZbReceived.keys() | list)[0] }}/Occupancy",
              "payload_off": "0",
              "payload_on": "1"
            }
      - service: mqtt.publish
        data_template:
          topic: > 
            tele/zigbee/{{ (trigger.payload_json.ZbReceived.keys() | list)[0] }}/Occupancy
          payload: >
            {% set code = (trigger.payload_json.ZbReceived.keys() | list)[0] %}
            {{ trigger.payload_json.ZbReceived[code].Occupancy }}
          retain: true

  # Opening (Door) sensors
  - alias: 'MQTT Zigbee Zone Status'
    mode: parallel
    initial_state: true
    trigger:
      - platform: mqtt
        topic: 'tele/tasmota_zbbridge/SENSOR'
    condition:
      - condition: template
        value_template: >
          {{ 'ZoneStatusChange' in ((trigger.payload_json.ZbReceived.values() | list)[0].keys() | list) }}
    action:
      - service: mqtt.publish
        data_template:
          topic: homeassistant/binary_sensor/{{ (trigger.payload_json.ZbReceived.keys() | list)[0] }}ZoneStatusChange/config
          retain: true
          payload: >
            {% set code = (trigger.payload_json.ZbReceived.keys() | list)[0] %}
            {
              "name": "{{ trigger.payload_json.ZbReceived[code].Name }}",
              "device_class": "opening",
              "state_topic": "tele/zigbee/{{ (trigger.payload_json.ZbReceived.keys() | list)[0] }}/ZoneStatusChange",
              "payload_off": "0",
              "payload_on": "1"
            }
      - service: mqtt.publish
        data_template:
          topic: > 
            tele/zigbee/{{ (trigger.payload_json.ZbReceived.keys() | list)[0] }}/ZoneStatusChange
          payload: >
            {% set code = (trigger.payload_json.ZbReceived.keys() | list)[0] %}
            {{ trigger.payload_json.ZbReceived[code].ZoneStatusChange }}
          retain: true

  # Humidity
  - alias: 'MQTT Zigbee Humidity'
    mode: parallel
    initial_state: true
    trigger:
      - platform: mqtt
        topic: 'tele/tasmota_zbbridge/SENSOR'
    condition:
      - condition: template
        value_template: >
          {{ 'Humidity' in ((trigger.payload_json.ZbReceived.values() | list)[0].keys() | list) }}
    action:
      - service: mqtt.publish
        data_template:
          topic: homeassistant/sensor/{{ (trigger.payload_json.ZbReceived.keys() | list)[0] }}Humidity/config
          retain: true
          payload: >
            {% set code = (trigger.payload_json.ZbReceived.keys() | list)[0] %}
            {
              "name": "{{ trigger.payload_json.ZbReceived[code].Name }} Humidity",
              "device_class": "humidity",
              "state_topic": "tele/zigbee/{{ (trigger.payload_json.ZbReceived.keys() | list)[0] }}/Humidity",
              "expire_after": "7200",
              "unit_of_measurement": "%"
            }
      - service: mqtt.publish
        data_template:
          topic: > 
            tele/zigbee/{{ (trigger.payload_json.ZbReceived.keys() | list)[0] }}/Humidity
          payload: >
            {% set code = (trigger.payload_json.ZbReceived.keys() | list)[0] %}
            {{ trigger.payload_json.ZbReceived[code].Humidity }}
          retain: true

  # Temperature
  - alias: 'MQTT Zigbee Temperature'
    mode: parallel
    initial_state: true
    trigger:
      - platform: mqtt
        topic: 'tele/tasmota_zbbridge/SENSOR'
    condition:
      - condition: template
        value_template: >
          {{ 'Temperature' in ((trigger.payload_json.ZbReceived.values() | list)[0].keys() | list) }}
    action:
      - service: mqtt.publish
        data_template:
          topic: homeassistant/sensor/{{ (trigger.payload_json.ZbReceived.keys() | list)[0] }}Temperature/config
          retain: true
          payload: >
            {% set code = (trigger.payload_json.ZbReceived.keys() | list)[0] %}
            {
              "name": "{{ trigger.payload_json.ZbReceived[code].Name }} Temperature",
              "device_class": "temperature",
              "state_topic": "tele/zigbee/{{ (trigger.payload_json.ZbReceived.keys() | list)[0] }}/Temperature",
              "expire_after": "7200",
              "unit_of_measurement": "Â°C"
            }
      - service: mqtt.publish
        data_template:
          topic: > 
            tele/zigbee/{{ (trigger.payload_json.ZbReceived.keys() | list)[0] }}/Temperature
          payload: >
            {% set code = (trigger.payload_json.ZbReceived.keys() | list)[0] %}
            {{ trigger.payload_json.ZbReceived[code].Temperature }}
          retain: true

  # Pressure
  - alias: 'MQTT Zigbee Pressure'
    mode: parallel
    initial_state: true
    trigger:
      - platform: mqtt
        topic: 'tele/tasmota_zbbridge/SENSOR'
    condition:
      - condition: template
        value_template: >
          {{ 'Pressure' in ((trigger.payload_json.ZbReceived.values() | list)[0].keys() | list) }}
    action:
      - service: mqtt.publish
        data_template:
          topic: homeassistant/sensor/{{ (trigger.payload_json.ZbReceived.keys() | list)[0] }}Pressure/config
          retain: true
          payload: >
            {% set code = (trigger.payload_json.ZbReceived.keys() | list)[0] %}
            {
              "name": "{{ trigger.payload_json.ZbReceived[code].Name }} Pressure",
              "device_class": "pressure",
              "state_topic": "tele/zigbee/{{ (trigger.payload_json.ZbReceived.keys() | list)[0] }}/Pressure",
              "expire_after": "7200"
            }
      - service: mqtt.publish
        data_template:
          topic: > 
            tele/zigbee/{{ (trigger.payload_json.ZbReceived.keys() | list)[0] }}/Pressure
          payload: >
            {% set code = (trigger.payload_json.ZbReceived.keys() | list)[0] %}
            {{ trigger.payload_json.ZbReceived[code].Pressure }}
          retain: true

  # Illuminance
  - alias: 'MQTT Zigbee Illuminance'
    mode: parallel
    initial_state: true
    trigger:
      - platform: mqtt
        topic: 'tele/tasmota_zbbridge/SENSOR'
    condition:
      - condition: template
        value_template: >
          {{ 'Illuminance' in ((trigger.payload_json.ZbReceived.values() | list)[0].keys() | list) }}
    action:
      - service: mqtt.publish
        data_template:
          topic: homeassistant/sensor/{{ (trigger.payload_json.ZbReceived.keys() | list)[0] }}Illuminance/config
          retain: true
          payload: >
            {% set code = (trigger.payload_json.ZbReceived.keys() | list)[0] %}
            {
              "name": "{{ trigger.payload_json.ZbReceived[code].Name }} Illuminance",
              "device_class": "illuminance",
              "state_topic": "tele/zigbee/{{ (trigger.payload_json.ZbReceived.keys() | list)[0] }}/Illuminance",
              "expire_after": "7200"
            }
      - service: mqtt.publish
        data_template:
          topic: > 
            tele/zigbee/{{ (trigger.payload_json.ZbReceived.keys() | list)[0] }}/Illuminance
          payload: >
            {% set code = (trigger.payload_json.ZbReceived.keys() | list)[0] %}
            {{ trigger.payload_json.ZbReceived[code].Illuminance }}
          retain: true

  # Battery
  - alias: 'MQTT Zigbee Battery'
    mode: parallel
    initial_state: true
    trigger:
      - platform: mqtt
        topic: 'tele/tasmota_zbbridge/SENSOR'
    condition:
      - condition: template
        value_template: "{{ 'BatteryPercentage' in ((trigger.payload_json.ZbReceived.values() | list)[0].keys() | list) }}"
    action:
      - service: mqtt.publish
        data_template:
          topic: homeassistant/sensor/{{ (trigger.payload_json.ZbReceived.keys() | list)[0] }}Battery/config
          retain: true
          payload: >
            {% set code = (trigger.payload_json.ZbReceived.keys() | list)[0] %}
            {
              "name": "{{ trigger.payload_json.ZbReceived[code].Name }} Battery",
              "device_class": "battery",
              "state_topic": "tele/zigbee/{{ (trigger.payload_json.ZbReceived.keys() | list)[0] }}/Battery",
              "expire_after": "7200",
              "unit_of_measurement": "%"
            }
      - service: mqtt.publish
        data_template:
          topic: > 
            tele/zigbee/{{ (trigger.payload_json.ZbReceived.keys() | list)[0] }}/Battery
          payload: >
            {% set code = (trigger.payload_json.ZbReceived.keys() | list)[0] %}
            {{ trigger.payload_json.ZbReceived[code].BatteryPercentage }}
          retain: true

  # Button click
  - alias: 'MQTT Zigbee Button Click'
    mode: parallel
    initial_state: true
    trigger:
      - platform: mqtt
        topic: 'tele/tasmota_zbbridge/SENSOR'
    condition:
      - condition: template
        value_template: "{{ 'click' in ((trigger.payload_json.ZbReceived.values() | list)[0].keys() | list) }}"
    action:
      - service: mqtt.publish
        data_template:
          topic: homeassistant/sensor/{{ (trigger.payload_json.ZbReceived.keys() | list)[0] }}Click/config
          retain: true
          payload: >
            {% set code = (trigger.payload_json.ZbReceived.keys() | list)[0] %}
            {
              "name": "{{ trigger.payload_json.ZbReceived[code].Name }} Battery",
              "device_class": "battery",
              "state_topic": "tele/zigbee/{{ (trigger.payload_json.ZbReceived.keys() | list)[0] }}/Click",
              "payload_off": "0",
              "payload_on": "1"
            }
      - service: mqtt.publish
        data_template:
          topic: > 
            tele/zigbee/{{ (trigger.payload_json.ZbReceived.keys() | list)[0] }}/Click
          payload: >
            {% set code = (trigger.payload_json.ZbReceived.keys() | list)[0] %}
            {{ trigger.payload_json.ZbReceived[code].click }}
          #retain: true
      - delay:
           seconds: 2
      - service: mqtt.publish
        data_template:
          topic: > 
            tele/zigbee/{{ (trigger.payload_json.ZbReceived.keys() | list)[0] }}/Click
          payload: ""
          #retain: true

  # Button action
  - alias: 'MQTT Zigbee Button Hold'
    mode: parallel
    initial_state: true
    trigger:
      - platform: mqtt
        topic: 'tele/tasmota_zbbridge/SENSOR'
    condition:
      - condition: template
        value_template: "{{ 'action' in ((trigger.payload_json.ZbReceived.values() | list)[0].keys() | list) }}"
    action:
      - service: mqtt.publish
        data_template:
          topic: homeassistant/sensor/{{ (trigger.payload_json.ZbReceived.keys() | list)[0] }}Click/config
          retain: true
          payload: >
            {% set code = (trigger.payload_json.ZbReceived.keys() | list)[0] %}
            {
              "name": "{{ trigger.payload_json.ZbReceived[code].Name }} Battery",
              "device_class": "battery",
              "state_topic": "tele/zigbee/{{ (trigger.payload_json.ZbReceived.keys() | list)[0] }}/Action",
              "payload_off": "0",
              "payload_on": "1"
            }
      - service: mqtt.publish
        data_template:
          topic: > 
            tele/zigbee/{{ (trigger.payload_json.ZbReceived.keys() | list)[0] }}/Action
          payload: >
            {% set code = (trigger.payload_json.ZbReceived.keys() | list)[0] %}
            {{ trigger.payload_json.ZbReceived[code].action }}
          #retain: true
      - delay:
           seconds: 2
      - service: mqtt.publish
        data_template:
          topic: > 
            tele/zigbee/{{ (trigger.payload_json.ZbReceived.keys() | list)[0] }}/Action
          payload: ""
          #retain: true          